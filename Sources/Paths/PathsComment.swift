// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var comment: Comment {
        Comment(path: "/comment")
    }

    public struct Comment {
        /// Path: `/comment`
        public let path: String

        public func get(getComment: GetComment? = nil) -> Request<LemmyKit.CommentResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(getComment))
        }

        private func makeGetQuery(_ getComment: GetComment?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(getComment, forKey: "GetComment")
            return encoder.items
        }

        public struct GetComment: Codable {
            /// CommentId
            public var id: Double
            /// GetComment.auth
            public var auth: String?

            public init(id: Double, auth: String? = nil) {
                self.id = id
                self.auth = auth
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(id, forKey: "id")
                encoder.encode(auth, forKey: "auth")
                return encoder.items
            }
        }

        public func post(_ body: LemmyKit.CreateComment? = nil) -> Request<LemmyKit.CommentResponse> {
            Request(path: path, method: "POST", body: body)
        }

        public func put(_ body: LemmyKit.EditComment? = nil) -> Request<LemmyKit.CommentResponse> {
            Request(path: path, method: "PUT", body: body)
        }
    }
}
