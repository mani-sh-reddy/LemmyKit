// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var modlog: Modlog {
        Modlog(path: "/modlog")
    }

    public struct Modlog {
        /// Path: `/modlog`
        public let path: String

        /// Returns All the mod actions
        public func get(getModlog: GetModlog? = nil) -> Request<LemmyKit.GetModlogResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(getModlog))
        }

        private func makeGetQuery(_ getModlog: GetModlog?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(getModlog, forKey: "GetModlog")
            return encoder.items
        }

        public struct GetModlog: Codable {
            /// PersonId
            public var modPersonID: Double?
            public var communityID: Double?
            /// GetModlog.page
            public var page: Double?
            /// GetModlog.limit
            public var limit: Double?
            /// ModlogActionType
            public var type: `Type`?
            /// PersonId
            public var otherPersonID: Double?
            /// GetModlog.auth
            public var auth: String?

            /// ModlogActionType
            public enum `Type`: String, Codable, CaseIterable {
                case all = "All"
                case modRemovePost = "ModRemovePost"
                case modLockPost = "ModLockPost"
                case modFeaturePost = "ModFeaturePost"
                case modRemoveComment = "ModRemoveComment"
                case modRemoveCommunity = "ModRemoveCommunity"
                case modBanFromCommunity = "ModBanFromCommunity"
                case modAddCommunity = "ModAddCommunity"
                case modTransferCommunity = "ModTransferCommunity"
                case modAdd = "ModAdd"
                case modBan = "ModBan"
                case modHideCommunity = "ModHideCommunity"
                case adminPurgePerson = "AdminPurgePerson"
                case adminPurgeCommunity = "AdminPurgeCommunity"
                case adminPurgePost = "AdminPurgePost"
                case adminPurgeComment = "AdminPurgeComment"
            }

            public init(modPersonID: Double? = nil, communityID: Double? = nil, page: Double? = nil, limit: Double? = nil, type: `Type`? = nil, otherPersonID: Double? = nil, auth: String? = nil) {
                self.modPersonID = modPersonID
                self.communityID = communityID
                self.page = page
                self.limit = limit
                self.type = type
                self.otherPersonID = otherPersonID
                self.auth = auth
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(modPersonID, forKey: "mod_person_id")
                encoder.encode(communityID, forKey: "community_id")
                encoder.encode(page, forKey: "page")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(type, forKey: "type_")
                encoder.encode(otherPersonID, forKey: "other_person_id")
                encoder.encode(auth, forKey: "auth")
                return encoder.items
            }
        }
    }
}
