// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.PrivateMessage.Report {
    public var list: List {
        List(path: path + "/list")
    }

    public struct List {
        /// Path: `/private_message/report/list`
        public let path: String

        public func get(listPrivateMessageReports: ListPrivateMessageReports? = nil) -> Request<LemmyKit.ListPrivateMessageReportsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(listPrivateMessageReports))
        }

        private func makeGetQuery(_ listPrivateMessageReports: ListPrivateMessageReports?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(listPrivateMessageReports, forKey: "ListPrivateMessageReports")
            return encoder.items
        }

        public struct ListPrivateMessageReports: Codable {
            /// ListPrivateMessageReports.page
            public var page: Double?
            /// ListPrivateMessageReports.limit
            public var limit: Double?
            /// ListPrivateMessageReports.unresolved_only
            public var isUnresolvedOnly: Bool?
            /// ListPrivateMessageReports.auth
            public var auth: String

            public init(page: Double? = nil, limit: Double? = nil, isUnresolvedOnly: Bool? = nil, auth: String) {
                self.page = page
                self.limit = limit
                self.isUnresolvedOnly = isUnresolvedOnly
                self.auth = auth
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(isUnresolvedOnly, forKey: "unresolved_only")
                encoder.encode(auth, forKey: "auth")
                return encoder.items
            }
        }
    }
}
