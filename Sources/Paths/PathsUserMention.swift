// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.User {
    public var mention: Mention {
        Mention(path: path + "/mention")
    }

    public struct Mention {
        /// Path: `/user/mention`
        public let path: String

        public func get(getPersonMentions: GetPersonMentions? = nil) -> Request<LemmyKit.GetPersonMentionsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(getPersonMentions))
        }

        private func makeGetQuery(_ getPersonMentions: GetPersonMentions?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(getPersonMentions, forKey: "GetPersonMentions")
            return encoder.items
        }

        public struct GetPersonMentions: Codable {
            /// CommentSortType
            public var sort: Sort?
            /// GetPersonMentions.page
            public var page: Double?
            /// GetPersonMentions.limit
            public var limit: Double?
            /// GetPersonMentions.unread_only
            public var isUnreadOnly: Bool?
            /// GetPersonMentions.auth
            public var auth: String

            /// CommentSortType
            public enum Sort: String, Codable, CaseIterable {
                case hot = "Hot"
                case top = "Top"
                case new = "New"
                case old = "Old"
            }

            public init(sort: Sort? = nil, page: Double? = nil, limit: Double? = nil, isUnreadOnly: Bool? = nil, auth: String) {
                self.sort = sort
                self.page = page
                self.limit = limit
                self.isUnreadOnly = isUnreadOnly
                self.auth = auth
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(page, forKey: "page")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(isUnreadOnly, forKey: "unread_only")
                encoder.encode(auth, forKey: "auth")
                return encoder.items
            }
        }
    }
}
