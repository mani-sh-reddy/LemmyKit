// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var search: Search {
        Search(path: "/search")
    }

    public struct Search {
        /// Path: `/search`
        public let path: String

        /// Search for comments/posts/communities/users in this lemmy instance
        public func get(search: Search? = nil) -> Request<LemmyKit.SearchResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(search))
        }

        private func makeGetQuery(_ search: Search?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(search, forKey: "Search")
            return encoder.items
        }

        public struct Search: Codable {
            /// Search.q
            public var q: String
            public var communityID: Double?
            /// Search.community_name
            public var communityName: String?
            /// PersonId
            public var creatorID: Double?
            /// SearchType
            public var type: `Type`?
            /// SortType
            public var sort: Sort?
            public var listingType: ListingType?
            /// Search.page
            public var page: Double?
            /// Search.limit
            public var limit: Double?
            /// Search.auth
            public var auth: String?

            /// SearchType
            public enum `Type`: String, Codable, CaseIterable {
                case all = "All"
                case comments = "Comments"
                case posts = "Posts"
                case communities = "Communities"
                case users = "Users"
                case url = "Url"
            }

            /// SortType
            public enum Sort: String, Codable, CaseIterable {
                case active = "Active"
                case hot = "Hot"
                case new = "New"
                case old = "Old"
                case topDay = "TopDay"
                case topWeek = "TopWeek"
                case topMonth = "TopMonth"
                case topYear = "TopYear"
                case topAll = "TopAll"
                case mostComments = "MostComments"
                case newComments = "NewComments"
                case topHour = "TopHour"
                case topSixHour = "TopSixHour"
                case topTwelveHour = "TopTwelveHour"
                case topThreeMonths = "TopThreeMonths"
                case topSixMonths = "TopSixMonths"
                case topNineMonths = "TopNineMonths"
            }

            public enum ListingType: String, Codable, CaseIterable {
                case all = "All"
                case local = "Local"
                case subscribed = "Subscribed"
            }

            public init(q: String, communityID: Double? = nil, communityName: String? = nil, creatorID: Double? = nil, type: `Type`? = nil, sort: Sort? = nil, listingType: ListingType? = nil, page: Double? = nil, limit: Double? = nil, auth: String? = nil) {
                self.q = q
                self.communityID = communityID
                self.communityName = communityName
                self.creatorID = creatorID
                self.type = type
                self.sort = sort
                self.listingType = listingType
                self.page = page
                self.limit = limit
                self.auth = auth
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(q, forKey: "q")
                encoder.encode(communityID, forKey: "community_id")
                encoder.encode(communityName, forKey: "community_name")
                encoder.encode(creatorID, forKey: "creator_id")
                encoder.encode(type, forKey: "type_")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(listingType, forKey: "listing_type")
                encoder.encode(page, forKey: "page")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(auth, forKey: "auth")
                return encoder.items
            }
        }
    }
}
