// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Comment {
    public var list: List {
        List(path: path + "/list")
    }

    public struct List {
        /// Path: `/comment/list`
        public let path: String

        public func get(getComments: GetComments? = nil) -> Request<LemmyKit.GetCommentsResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(getComments))
        }

        private func makeGetQuery(_ getComments: GetComments?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(getComments, forKey: "GetComments")
            return encoder.items
        }

        public struct GetComments: Codable {
            /// ListingType
            public var type: `Type`?
            /// CommentSortType
            public var sort: Sort?
            /// GetComments.max_depth
            public var maxDepth: Double?
            /// GetComments.page
            public var page: Double?
            /// GetComments.limit
            public var limit: Double?
            public var communityID: Double?
            /// GetComments.community_name
            public var communityName: String?
            public var postID: Double?
            /// CommentId
            public var parentID: Double?
            /// GetComments.saved_only
            public var isSavedOnly: Bool?
            /// GetComments.auth
            public var auth: String?

            /// ListingType
            public enum `Type`: String, Codable, CaseIterable {
                case all = "All"
                case local = "Local"
                case subscribed = "Subscribed"
            }

            /// CommentSortType
            public enum Sort: String, Codable, CaseIterable {
                case hot = "Hot"
                case top = "Top"
                case new = "New"
                case old = "Old"
            }

            public init(type: `Type`? = nil, sort: Sort? = nil, maxDepth: Double? = nil, page: Double? = nil, limit: Double? = nil, communityID: Double? = nil, communityName: String? = nil, postID: Double? = nil, parentID: Double? = nil, isSavedOnly: Bool? = nil, auth: String? = nil) {
                self.type = type
                self.sort = sort
                self.maxDepth = maxDepth
                self.page = page
                self.limit = limit
                self.communityID = communityID
                self.communityName = communityName
                self.postID = postID
                self.parentID = parentID
                self.isSavedOnly = isSavedOnly
                self.auth = auth
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(type, forKey: "type_")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(maxDepth, forKey: "max_depth")
                encoder.encode(page, forKey: "page")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(communityID, forKey: "community_id")
                encoder.encode(communityName, forKey: "community_name")
                encoder.encode(postID, forKey: "post_id")
                encoder.encode(parentID, forKey: "parent_id")
                encoder.encode(isSavedOnly, forKey: "saved_only")
                encoder.encode(auth, forKey: "auth")
                return encoder.items
            }
        }
    }
}
