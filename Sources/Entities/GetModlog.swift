// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GetModlog: Codable {
    /// PersonId
    public var modPersonID: Double?
    public var communityID: Double?
    /// GetModlog.page
    public var page: Double?
    /// GetModlog.limit
    public var limit: Double?
    /// ModlogActionType
    public var type: ModlogActionType?
    /// PersonId
    public var otherPersonID: Double?
    /// GetModlog.auth
    public var auth: String?

    public init(modPersonID: Double? = nil, communityID: Double? = nil, page: Double? = nil, limit: Double? = nil, type: ModlogActionType? = nil, otherPersonID: Double? = nil, auth: String? = nil) {
        self.modPersonID = modPersonID
        self.communityID = communityID
        self.page = page
        self.limit = limit
        self.type = type
        self.otherPersonID = otherPersonID
        self.auth = auth
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.modPersonID = try values.decodeIfPresent(Double.self, forKey: "mod_person_id")
        self.communityID = try values.decodeIfPresent(Double.self, forKey: "community_id")
        self.page = try values.decodeIfPresent(Double.self, forKey: "page")
        self.limit = try values.decodeIfPresent(Double.self, forKey: "limit")
        self.type = try values.decodeIfPresent(ModlogActionType.self, forKey: "type_")
        self.otherPersonID = try values.decodeIfPresent(Double.self, forKey: "other_person_id")
        self.auth = try values.decodeIfPresent(String.self, forKey: "auth")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(modPersonID, forKey: "mod_person_id")
        try values.encodeIfPresent(communityID, forKey: "community_id")
        try values.encodeIfPresent(page, forKey: "page")
        try values.encodeIfPresent(limit, forKey: "limit")
        try values.encodeIfPresent(type, forKey: "type_")
        try values.encodeIfPresent(otherPersonID, forKey: "other_person_id")
        try values.encodeIfPresent(auth, forKey: "auth")
    }
}
