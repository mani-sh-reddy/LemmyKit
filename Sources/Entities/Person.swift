// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Person: Codable {
    /// PersonId
    public var id: Double
    /// Person.name
    public var name: String
    /// Person.display_name
    public var displayName: String?
    /// Person.avatar
    public var avatar: String?
    /// Person.banned
    public var isBanned: Bool
    /// Person.published
    public var published: String
    /// Person.updated
    public var updated: String?
    /// Person.actor_id
    public var actorID: String
    /// Person.bio
    public var bio: String?
    /// Person.local
    public var isLocal: Bool
    /// Person.banner
    public var banner: String?
    /// Person.deleted
    public var isDeleted: Bool
    /// Person.inbox_url
    public var inboxURL: String?
    /// Person.matrix_user_id
    public var matrixUserID: String?
    /// Person.admin
    public var isAdmin: Bool
    /// Person.bot_account
    public var isBotAccount: Bool
    /// Person.ban_expires
    public var banExpires: String?
    public var instanceID: Double

    public init(id: Double, name: String, displayName: String? = nil, avatar: String? = nil, isBanned: Bool, published: String, updated: String? = nil, actorID: String, bio: String? = nil, isLocal: Bool, banner: String? = nil, isDeleted: Bool, inboxURL: String, matrixUserID: String? = nil, isAdmin: Bool, isBotAccount: Bool, banExpires: String? = nil, instanceID: Double) {
        self.id = id
        self.name = name
        self.displayName = displayName
        self.avatar = avatar
        self.isBanned = isBanned
        self.published = published
        self.updated = updated
        self.actorID = actorID
        self.bio = bio
        self.isLocal = isLocal
        self.banner = banner
        self.isDeleted = isDeleted
        self.inboxURL = inboxURL
        self.matrixUserID = matrixUserID
        self.isAdmin = isAdmin
        self.isBotAccount = isBotAccount
        self.banExpires = banExpires
        self.instanceID = instanceID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
        self.avatar = try values.decodeIfPresent(String.self, forKey: "avatar")
        self.isBanned = try values.decode(Bool.self, forKey: "banned")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
        self.actorID = try values.decode(String.self, forKey: "actor_id")
        self.bio = try values.decodeIfPresent(String.self, forKey: "bio")
        self.isLocal = try values.decode(Bool.self, forKey: "local")
        self.banner = try values.decodeIfPresent(String.self, forKey: "banner")
        self.isDeleted = try values.decode(Bool.self, forKey: "deleted")
        self.inboxURL = try values.decode(String.self, forKey: "inbox_url")
        self.matrixUserID = try values.decodeIfPresent(String.self, forKey: "matrix_user_id")
        self.isAdmin = try values.decode(Bool.self, forKey: "admin")
        self.isBotAccount = try values.decode(Bool.self, forKey: "bot_account")
        self.banExpires = try values.decodeIfPresent(String.self, forKey: "ban_expires")
        self.instanceID = try values.decode(Double.self, forKey: "instance_id")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(displayName, forKey: "display_name")
        try values.encodeIfPresent(avatar, forKey: "avatar")
        try values.encode(isBanned, forKey: "banned")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
        try values.encode(actorID, forKey: "actor_id")
        try values.encodeIfPresent(bio, forKey: "bio")
        try values.encode(isLocal, forKey: "local")
        try values.encodeIfPresent(banner, forKey: "banner")
        try values.encode(isDeleted, forKey: "deleted")
        try values.encode(inboxURL, forKey: "inbox_url")
        try values.encodeIfPresent(matrixUserID, forKey: "matrix_user_id")
        try values.encode(isAdmin, forKey: "admin")
        try values.encode(isBotAccount, forKey: "bot_account")
        try values.encodeIfPresent(banExpires, forKey: "ban_expires")
        try values.encode(instanceID, forKey: "instance_id")
    }
}
