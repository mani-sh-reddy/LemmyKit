// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateCommunity: Codable {
    /// CreateCommunity.name
    public var name: String
    /// CreateCommunity.title
    public var title: String
    /// CreateCommunity.description
    public var description: String?
    /// CreateCommunity.icon
    public var icon: String?
    /// CreateCommunity.banner
    public var banner: String?
    /// CreateCommunity.nsfw
    public var isNsfw: Bool?
    /// CreateCommunity.posting_restricted_to_mods
    public var isPostingRestrictedToMods: Bool?
    /// CreateCommunity.discussion_languages
    public var discussionLanguages: [Double]?
    /// CreateCommunity.auth
    public var auth: String

    public init(name: String, title: String, description: String? = nil, icon: String? = nil, banner: String? = nil, isNsfw: Bool? = nil, isPostingRestrictedToMods: Bool? = nil, discussionLanguages: [Double]? = nil, auth: String) {
        self.name = name
        self.title = title
        self.description = description
        self.icon = icon
        self.banner = banner
        self.isNsfw = isNsfw
        self.isPostingRestrictedToMods = isPostingRestrictedToMods
        self.discussionLanguages = discussionLanguages
        self.auth = auth
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.title = try values.decode(String.self, forKey: "title")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.icon = try values.decodeIfPresent(String.self, forKey: "icon")
        self.banner = try values.decodeIfPresent(String.self, forKey: "banner")
        self.isNsfw = try values.decodeIfPresent(Bool.self, forKey: "nsfw")
        self.isPostingRestrictedToMods = try values.decodeIfPresent(Bool.self, forKey: "posting_restricted_to_mods")
        self.discussionLanguages = try values.decodeIfPresent([Double].self, forKey: "discussion_languages")
        self.auth = try values.decode(String.self, forKey: "auth")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encode(title, forKey: "title")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(banner, forKey: "banner")
        try values.encodeIfPresent(isNsfw, forKey: "nsfw")
        try values.encodeIfPresent(isPostingRestrictedToMods, forKey: "posting_restricted_to_mods")
        try values.encodeIfPresent(discussionLanguages, forKey: "discussion_languages")
        try values.encode(auth, forKey: "auth")
    }
}
