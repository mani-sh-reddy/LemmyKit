// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GetPosts: Codable {
    /// ListingType
    public var type: ListingType?
    /// SortType
    public var sort: SortType?
    /// GetPosts.page
    public var page: Double?
    /// GetPosts.limit
    public var limit: Double?
    public var communityID: Double?
    /// GetPosts.community_name
    public var communityName: String?
    /// GetPosts.saved_only
    public var isSavedOnly: Bool?
    /// GetPosts.moderator_view
    public var isModeratorView: Bool?
    /// GetPosts.auth
    public var auth: String?

    public init(type: ListingType? = nil, sort: SortType? = nil, page: Double? = nil, limit: Double? = nil, communityID: Double? = nil, communityName: String? = nil, isSavedOnly: Bool? = nil, isModeratorView: Bool? = nil, auth: String? = nil) {
        self.type = type
        self.sort = sort
        self.page = page
        self.limit = limit
        self.communityID = communityID
        self.communityName = communityName
        self.isSavedOnly = isSavedOnly
        self.isModeratorView = isModeratorView
        self.auth = auth
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decodeIfPresent(ListingType.self, forKey: "type_")
        self.sort = try values.decodeIfPresent(SortType.self, forKey: "sort")
        self.page = try values.decodeIfPresent(Double.self, forKey: "page")
        self.limit = try values.decodeIfPresent(Double.self, forKey: "limit")
        self.communityID = try values.decodeIfPresent(Double.self, forKey: "community_id")
        self.communityName = try values.decodeIfPresent(String.self, forKey: "community_name")
        self.isSavedOnly = try values.decodeIfPresent(Bool.self, forKey: "saved_only")
        self.isModeratorView = try values.decodeIfPresent(Bool.self, forKey: "moderator_view")
        self.auth = try values.decodeIfPresent(String.self, forKey: "auth")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(type, forKey: "type_")
        try values.encodeIfPresent(sort, forKey: "sort")
        try values.encodeIfPresent(page, forKey: "page")
        try values.encodeIfPresent(limit, forKey: "limit")
        try values.encodeIfPresent(communityID, forKey: "community_id")
        try values.encodeIfPresent(communityName, forKey: "community_name")
        try values.encodeIfPresent(isSavedOnly, forKey: "saved_only")
        try values.encodeIfPresent(isModeratorView, forKey: "moderator_view")
        try values.encodeIfPresent(auth, forKey: "auth")
    }
}
