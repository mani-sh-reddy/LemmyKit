// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PostReportView: Codable {
    public var postReport: PostReport
    public var post: Post
    public var community: Community
    /// Person
    public var creator: Person
    /// Person
    public var postCreator: Person
    /// PostReportView.creator_banned_from_community
    public var isCreatorBannedFromCommunity: Bool
    /// PostReportView.my_vote
    public var myVote: Double?
    /// PostAggregates
    public var counts: PostAggregates
    /// Person
    public var resolver: Person?

    public init(postReport: PostReport, post: Post, community: Community, creator: Person, postCreator: Person, isCreatorBannedFromCommunity: Bool, myVote: Double? = nil, counts: PostAggregates, resolver: Person? = nil) {
        self.postReport = postReport
        self.post = post
        self.community = community
        self.creator = creator
        self.postCreator = postCreator
        self.isCreatorBannedFromCommunity = isCreatorBannedFromCommunity
        self.myVote = myVote
        self.counts = counts
        self.resolver = resolver
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.postReport = try values.decode(PostReport.self, forKey: "post_report")
        self.post = try values.decode(Post.self, forKey: "post")
        self.community = try values.decode(Community.self, forKey: "community")
        self.creator = try values.decode(Person.self, forKey: "creator")
        self.postCreator = try values.decode(Person.self, forKey: "post_creator")
        self.isCreatorBannedFromCommunity = try values.decode(Bool.self, forKey: "creator_banned_from_community")
        self.myVote = try values.decodeIfPresent(Double.self, forKey: "my_vote")
        self.counts = try values.decode(PostAggregates.self, forKey: "counts")
        self.resolver = try values.decodeIfPresent(Person.self, forKey: "resolver")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(postReport, forKey: "post_report")
        try values.encode(post, forKey: "post")
        try values.encode(community, forKey: "community")
        try values.encode(creator, forKey: "creator")
        try values.encode(postCreator, forKey: "post_creator")
        try values.encode(isCreatorBannedFromCommunity, forKey: "creator_banned_from_community")
        try values.encodeIfPresent(myVote, forKey: "my_vote")
        try values.encode(counts, forKey: "counts")
        try values.encodeIfPresent(resolver, forKey: "resolver")
    }
}
