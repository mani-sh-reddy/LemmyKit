// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct RegistrationApplication: Codable {
    /// RegistrationApplication.id
    public var id: Double
    public var localUserID: Double
    /// RegistrationApplication.answer
    public var answer: String
    /// PersonId
    public var adminID: Double?
    /// RegistrationApplication.deny_reason
    public var denyReason: String?
    /// RegistrationApplication.published
    public var published: String

    public init(id: Double, localUserID: Double, answer: String, adminID: Double? = nil, denyReason: String? = nil, published: String) {
        self.id = id
        self.localUserID = localUserID
        self.answer = answer
        self.adminID = adminID
        self.denyReason = denyReason
        self.published = published
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.localUserID = try values.decode(Double.self, forKey: "local_user_id")
        self.answer = try values.decode(String.self, forKey: "answer")
        self.adminID = try values.decodeIfPresent(Double.self, forKey: "admin_id")
        self.denyReason = try values.decodeIfPresent(String.self, forKey: "deny_reason")
        self.published = try values.decode(String.self, forKey: "published")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(localUserID, forKey: "local_user_id")
        try values.encode(answer, forKey: "answer")
        try values.encodeIfPresent(adminID, forKey: "admin_id")
        try values.encodeIfPresent(denyReason, forKey: "deny_reason")
        try values.encode(published, forKey: "published")
    }
}
