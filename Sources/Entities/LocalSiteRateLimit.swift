// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LocalSiteRateLimit: Codable {
    /// LocalSiteRateLimit.id
    public var id: Double
    public var localSiteID: Double
    /// LocalSiteRateLimit.message
    public var message: Double
    /// LocalSiteRateLimit.message_per_second
    public var messagePerSecond: Double
    /// LocalSiteRateLimit.post
    public var post: Double
    /// LocalSiteRateLimit.post_per_second
    public var postPerSecond: Double
    /// LocalSiteRateLimit.register
    public var register: Double
    /// LocalSiteRateLimit.register_per_second
    public var registerPerSecond: Double
    /// LocalSiteRateLimit.image
    public var image: Double
    /// LocalSiteRateLimit.image_per_second
    public var imagePerSecond: Double
    /// LocalSiteRateLimit.comment
    public var comment: Double
    /// LocalSiteRateLimit.comment_per_second
    public var commentPerSecond: Double
    /// LocalSiteRateLimit.search
    public var search: Double
    /// LocalSiteRateLimit.search_per_second
    public var searchPerSecond: Double
    /// LocalSiteRateLimit.published
    public var published: String
    /// LocalSiteRateLimit.updated
    public var updated: String?

    public init(id: Double, localSiteID: Double, message: Double, messagePerSecond: Double, post: Double, postPerSecond: Double, register: Double, registerPerSecond: Double, image: Double, imagePerSecond: Double, comment: Double, commentPerSecond: Double, search: Double, searchPerSecond: Double, published: String, updated: String? = nil) {
        self.id = id
        self.localSiteID = localSiteID
        self.message = message
        self.messagePerSecond = messagePerSecond
        self.post = post
        self.postPerSecond = postPerSecond
        self.register = register
        self.registerPerSecond = registerPerSecond
        self.image = image
        self.imagePerSecond = imagePerSecond
        self.comment = comment
        self.commentPerSecond = commentPerSecond
        self.search = search
        self.searchPerSecond = searchPerSecond
        self.published = published
        self.updated = updated
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.localSiteID = try values.decode(Double.self, forKey: "local_site_id")
        self.message = try values.decode(Double.self, forKey: "message")
        self.messagePerSecond = try values.decode(Double.self, forKey: "message_per_second")
        self.post = try values.decode(Double.self, forKey: "post")
        self.postPerSecond = try values.decode(Double.self, forKey: "post_per_second")
        self.register = try values.decode(Double.self, forKey: "register")
        self.registerPerSecond = try values.decode(Double.self, forKey: "register_per_second")
        self.image = try values.decode(Double.self, forKey: "image")
        self.imagePerSecond = try values.decode(Double.self, forKey: "image_per_second")
        self.comment = try values.decode(Double.self, forKey: "comment")
        self.commentPerSecond = try values.decode(Double.self, forKey: "comment_per_second")
        self.search = try values.decode(Double.self, forKey: "search")
        self.searchPerSecond = try values.decode(Double.self, forKey: "search_per_second")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(localSiteID, forKey: "local_site_id")
        try values.encode(message, forKey: "message")
        try values.encode(messagePerSecond, forKey: "message_per_second")
        try values.encode(post, forKey: "post")
        try values.encode(postPerSecond, forKey: "post_per_second")
        try values.encode(register, forKey: "register")
        try values.encode(registerPerSecond, forKey: "register_per_second")
        try values.encode(image, forKey: "image")
        try values.encode(imagePerSecond, forKey: "image_per_second")
        try values.encode(comment, forKey: "comment")
        try values.encode(commentPerSecond, forKey: "comment_per_second")
        try values.encode(search, forKey: "search")
        try values.encode(searchPerSecond, forKey: "search_per_second")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
    }
}
