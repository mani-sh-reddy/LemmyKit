// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Site: Codable {
    /// SiteId
    public var id: Double
    /// Site.name
    public var name: String
    /// Site.sidebar
    public var sidebar: String?
    /// Site.published
    public var published: String
    /// Site.updated
    public var updated: String?
    /// Site.icon
    public var icon: String?
    /// Site.banner
    public var banner: String?
    /// Site.description
    public var description: String?
    /// Site.actor_id
    public var actorID: String
    /// Site.last_refreshed_at
    public var lastRefreshedAt: String
    /// Site.inbox_url
    public var inboxURL: String?
    /// Site.private_key
    public var privateKey: String?
    /// Site.public_key
    public var publicKey: String
    public var instanceID: Double

    public init(id: Double, name: String, sidebar: String? = nil, published: String, updated: String? = nil, icon: String? = nil, banner: String? = nil, description: String? = nil, actorID: String, lastRefreshedAt: String, inboxURL: String, privateKey: String? = nil, publicKey: String, instanceID: Double) {
        self.id = id
        self.name = name
        self.sidebar = sidebar
        self.published = published
        self.updated = updated
        self.icon = icon
        self.banner = banner
        self.description = description
        self.actorID = actorID
        self.lastRefreshedAt = lastRefreshedAt
        self.inboxURL = inboxURL
        self.privateKey = privateKey
        self.publicKey = publicKey
        self.instanceID = instanceID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.sidebar = try values.decodeIfPresent(String.self, forKey: "sidebar")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
        self.icon = try values.decodeIfPresent(String.self, forKey: "icon")
        self.banner = try values.decodeIfPresent(String.self, forKey: "banner")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.actorID = try values.decode(String.self, forKey: "actor_id")
        self.lastRefreshedAt = try values.decode(String.self, forKey: "last_refreshed_at")
        self.inboxURL = try values.decodeIfPresent(String.self, forKey: "inbox_url")
        self.privateKey = try values.decodeIfPresent(String.self, forKey: "private_key")
        self.publicKey = try values.decode(String.self, forKey: "public_key")
        self.instanceID = try values.decode(Double.self, forKey: "instance_id")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(sidebar, forKey: "sidebar")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(banner, forKey: "banner")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(actorID, forKey: "actor_id")
        try values.encode(lastRefreshedAt, forKey: "last_refreshed_at")
        try values.encode(inboxURL, forKey: "inbox_url")
        try values.encodeIfPresent(privateKey, forKey: "private_key")
        try values.encode(publicKey, forKey: "public_key")
        try values.encode(instanceID, forKey: "instance_id")
    }
}
