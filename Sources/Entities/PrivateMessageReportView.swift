// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PrivateMessageReportView: Codable {
    public var privateMessageReport: PrivateMessageReport
    public var privateMessage: PrivateMessage
    /// Person
    public var privateMessageCreator: Person
    /// Person
    public var creator: Person
    /// Person
    public var resolver: Person?

    public init(privateMessageReport: PrivateMessageReport, privateMessage: PrivateMessage, privateMessageCreator: Person, creator: Person, resolver: Person? = nil) {
        self.privateMessageReport = privateMessageReport
        self.privateMessage = privateMessage
        self.privateMessageCreator = privateMessageCreator
        self.creator = creator
        self.resolver = resolver
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.privateMessageReport = try values.decode(PrivateMessageReport.self, forKey: "private_message_report")
        self.privateMessage = try values.decode(PrivateMessage.self, forKey: "private_message")
        self.privateMessageCreator = try values.decode(Person.self, forKey: "private_message_creator")
        self.creator = try values.decode(Person.self, forKey: "creator")
        self.resolver = try values.decodeIfPresent(Person.self, forKey: "resolver")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(privateMessageReport, forKey: "private_message_report")
        try values.encode(privateMessage, forKey: "private_message")
        try values.encode(privateMessageCreator, forKey: "private_message_creator")
        try values.encode(creator, forKey: "creator")
        try values.encodeIfPresent(resolver, forKey: "resolver")
    }
}
