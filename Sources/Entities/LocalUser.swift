// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LocalUser: Codable {
    /// LocalUserId
    public var id: Double
    public var personID: Double
    /// LocalUser.email
    public var email: String?
    /// LocalUser.show_nsfw
    public var isShowNsfw: Bool
    /// LocalUser.blur_nsfw
    public var isBlurNsfw: Bool
    /// LocalUser.auto_expand
    public var isAutoExpand: Bool
    /// LocalUser.theme
    public var theme: String
    /// SortType
    public var defaultSortType: SortType
    /// ListingType
    public var defaultListingType: ListingType
    /// LocalUser.interface_language
    public var interfaceLanguage: String
    /// LocalUser.show_avatars
    public var isShowAvatars: Bool
    /// LocalUser.send_notifications_to_email
    public var isSendNotificationsToEmail: Bool
    /// LocalUser.validator_time
    public var validatorTime: String
    /// LocalUser.show_scores
    public var isShowScores: Bool
    /// LocalUser.show_bot_accounts
    public var isShowBotAccounts: Bool
    /// LocalUser.show_read_posts
    public var isShowReadPosts: Bool
    /// LocalUser.show_new_post_notifs
    public var isShowNewPostNotifs: Bool
    /// LocalUser.email_verified
    public var isEmailVerified: Bool
    /// LocalUser.accepted_application
    public var isAcceptedApplication: Bool
    /// LocalUser.totp_2fa_url
    public var totp2faURL: String?
    /// LocalUser.open_links_in_new_tab
    public var isOpenLinksInNewTab: Bool

    public init(id: Double, personID: Double, email: String? = nil, isShowNsfw: Bool, isBlurNsfw: Bool, isAutoExpand: Bool, theme: String, defaultSortType: SortType, defaultListingType: ListingType, interfaceLanguage: String, isShowAvatars: Bool, isSendNotificationsToEmail: Bool, validatorTime: String, isShowScores: Bool, isShowBotAccounts: Bool, isShowReadPosts: Bool, isShowNewPostNotifs: Bool, isEmailVerified: Bool, isAcceptedApplication: Bool, totp2faURL: String? = nil, isOpenLinksInNewTab: Bool) {
        self.id = id
        self.personID = personID
        self.email = email
        self.isShowNsfw = isShowNsfw
        self.isBlurNsfw = isBlurNsfw
        self.isAutoExpand = isAutoExpand
        self.theme = theme
        self.defaultSortType = defaultSortType
        self.defaultListingType = defaultListingType
        self.interfaceLanguage = interfaceLanguage
        self.isShowAvatars = isShowAvatars
        self.isSendNotificationsToEmail = isSendNotificationsToEmail
        self.validatorTime = validatorTime
        self.isShowScores = isShowScores
        self.isShowBotAccounts = isShowBotAccounts
        self.isShowReadPosts = isShowReadPosts
        self.isShowNewPostNotifs = isShowNewPostNotifs
        self.isEmailVerified = isEmailVerified
        self.isAcceptedApplication = isAcceptedApplication
        self.totp2faURL = totp2faURL
        self.isOpenLinksInNewTab = isOpenLinksInNewTab
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.personID = try values.decode(Double.self, forKey: "person_id")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.isShowNsfw = try values.decode(Bool.self, forKey: "show_nsfw")
        self.isBlurNsfw = try values.decode(Bool.self, forKey: "blur_nsfw")
        self.isAutoExpand = try values.decode(Bool.self, forKey: "auto_expand")
        self.theme = try values.decode(String.self, forKey: "theme")
        self.defaultSortType = try values.decode(SortType.self, forKey: "default_sort_type")
        self.defaultListingType = try values.decode(ListingType.self, forKey: "default_listing_type")
        self.interfaceLanguage = try values.decode(String.self, forKey: "interface_language")
        self.isShowAvatars = try values.decode(Bool.self, forKey: "show_avatars")
        self.isSendNotificationsToEmail = try values.decode(Bool.self, forKey: "send_notifications_to_email")
        self.validatorTime = try values.decode(String.self, forKey: "validator_time")
        self.isShowScores = try values.decode(Bool.self, forKey: "show_scores")
        self.isShowBotAccounts = try values.decode(Bool.self, forKey: "show_bot_accounts")
        self.isShowReadPosts = try values.decode(Bool.self, forKey: "show_read_posts")
        self.isShowNewPostNotifs = try values.decode(Bool.self, forKey: "show_new_post_notifs")
        self.isEmailVerified = try values.decode(Bool.self, forKey: "email_verified")
        self.isAcceptedApplication = try values.decode(Bool.self, forKey: "accepted_application")
        self.totp2faURL = try values.decodeIfPresent(String.self, forKey: "totp_2fa_url")
        self.isOpenLinksInNewTab = try values.decode(Bool.self, forKey: "open_links_in_new_tab")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(personID, forKey: "person_id")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encode(isShowNsfw, forKey: "show_nsfw")
        try values.encode(isBlurNsfw, forKey: "blur_nsfw")
        try values.encode(isAutoExpand, forKey: "auto_expand")
        try values.encode(theme, forKey: "theme")
        try values.encode(defaultSortType, forKey: "default_sort_type")
        try values.encode(defaultListingType, forKey: "default_listing_type")
        try values.encode(interfaceLanguage, forKey: "interface_language")
        try values.encode(isShowAvatars, forKey: "show_avatars")
        try values.encode(isSendNotificationsToEmail, forKey: "send_notifications_to_email")
        try values.encode(validatorTime, forKey: "validator_time")
        try values.encode(isShowScores, forKey: "show_scores")
        try values.encode(isShowBotAccounts, forKey: "show_bot_accounts")
        try values.encode(isShowReadPosts, forKey: "show_read_posts")
        try values.encode(isShowNewPostNotifs, forKey: "show_new_post_notifs")
        try values.encode(isEmailVerified, forKey: "email_verified")
        try values.encode(isAcceptedApplication, forKey: "accepted_application")
        try values.encodeIfPresent(totp2faURL, forKey: "totp_2fa_url")
        try values.encode(isOpenLinksInNewTab, forKey: "open_links_in_new_tab")
    }
}
