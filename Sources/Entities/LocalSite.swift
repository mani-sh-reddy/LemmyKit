// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LocalSite: Codable {
    /// LocalSiteId
    public var id: Double
    public var siteID: Double
    /// LocalSite.site_setup
    public var isSiteSetup: Bool
    /// LocalSite.enable_downvotes
    public var enableDownvotes: Bool
    /// LocalSite.enable_nsfw
    public var enableNsfw: Bool
    /// LocalSite.community_creation_admin_only
    public var isCommunityCreationAdminOnly: Bool
    /// LocalSite.require_email_verification
    public var requireEmailVerification: Bool
    /// LocalSite.application_question
    public var applicationQuestion: String?
    /// LocalSite.private_instance
    public var isPrivateInstance: Bool
    /// LocalSite.default_theme
    public var defaultTheme: String
    /// ListingType
    public var defaultPostListingType: ListingType
    /// LocalSite.legal_information
    public var legalInformation: String?
    /// LocalSite.hide_modlog_mod_names
    public var isHideModlogModNames: Bool
    /// LocalSite.application_email_admins
    public var isApplicationEmailAdmins: Bool
    /// LocalSite.slur_filter_regex
    public var slurFilterRegex: String?
    /// LocalSite.actor_name_max_length
    public var actorNameMaxLength: Double
    /// LocalSite.federation_enabled
    public var isFederationEnabled: Bool
    /// LocalSite.captcha_enabled
    public var isCaptchaEnabled: Bool
    /// LocalSite.captcha_difficulty
    public var captchaDifficulty: String
    /// LocalSite.published
    public var published: String
    /// LocalSite.updated
    public var updated: String?
    public var registrationMode: RegistrationMode
    /// LocalSite.reports_email_admins
    public var isReportsEmailAdmins: Bool

    public init(id: Double, siteID: Double, isSiteSetup: Bool, enableDownvotes: Bool, enableNsfw: Bool, isCommunityCreationAdminOnly: Bool, requireEmailVerification: Bool, applicationQuestion: String? = nil, isPrivateInstance: Bool, defaultTheme: String, defaultPostListingType: ListingType, legalInformation: String? = nil, isHideModlogModNames: Bool, isApplicationEmailAdmins: Bool, slurFilterRegex: String? = nil, actorNameMaxLength: Double, isFederationEnabled: Bool, isCaptchaEnabled: Bool, captchaDifficulty: String, published: String, updated: String? = nil, registrationMode: RegistrationMode, isReportsEmailAdmins: Bool) {
        self.id = id
        self.siteID = siteID
        self.isSiteSetup = isSiteSetup
        self.enableDownvotes = enableDownvotes
        self.enableNsfw = enableNsfw
        self.isCommunityCreationAdminOnly = isCommunityCreationAdminOnly
        self.requireEmailVerification = requireEmailVerification
        self.applicationQuestion = applicationQuestion
        self.isPrivateInstance = isPrivateInstance
        self.defaultTheme = defaultTheme
        self.defaultPostListingType = defaultPostListingType
        self.legalInformation = legalInformation
        self.isHideModlogModNames = isHideModlogModNames
        self.isApplicationEmailAdmins = isApplicationEmailAdmins
        self.slurFilterRegex = slurFilterRegex
        self.actorNameMaxLength = actorNameMaxLength
        self.isFederationEnabled = isFederationEnabled
        self.isCaptchaEnabled = isCaptchaEnabled
        self.captchaDifficulty = captchaDifficulty
        self.published = published
        self.updated = updated
        self.registrationMode = registrationMode
        self.isReportsEmailAdmins = isReportsEmailAdmins
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.siteID = try values.decode(Double.self, forKey: "site_id")
        self.isSiteSetup = try values.decode(Bool.self, forKey: "site_setup")
        self.enableDownvotes = try values.decode(Bool.self, forKey: "enable_downvotes")
        self.enableNsfw = try values.decode(Bool.self, forKey: "enable_nsfw")
        self.isCommunityCreationAdminOnly = try values.decode(Bool.self, forKey: "community_creation_admin_only")
        self.requireEmailVerification = try values.decode(Bool.self, forKey: "require_email_verification")
        self.applicationQuestion = try values.decodeIfPresent(String.self, forKey: "application_question")
        self.isPrivateInstance = try values.decode(Bool.self, forKey: "private_instance")
        self.defaultTheme = try values.decode(String.self, forKey: "default_theme")
        self.defaultPostListingType = try values.decode(ListingType.self, forKey: "default_post_listing_type")
        self.legalInformation = try values.decodeIfPresent(String.self, forKey: "legal_information")
        self.isHideModlogModNames = try values.decode(Bool.self, forKey: "hide_modlog_mod_names")
        self.isApplicationEmailAdmins = try values.decode(Bool.self, forKey: "application_email_admins")
        self.slurFilterRegex = try values.decodeIfPresent(String.self, forKey: "slur_filter_regex")
        self.actorNameMaxLength = try values.decode(Double.self, forKey: "actor_name_max_length")
        self.isFederationEnabled = try values.decode(Bool.self, forKey: "federation_enabled")
        self.isCaptchaEnabled = try values.decode(Bool.self, forKey: "captcha_enabled")
        self.captchaDifficulty = try values.decode(String.self, forKey: "captcha_difficulty")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
        self.registrationMode = try values.decode(RegistrationMode.self, forKey: "registration_mode")
        self.isReportsEmailAdmins = try values.decode(Bool.self, forKey: "reports_email_admins")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(siteID, forKey: "site_id")
        try values.encode(isSiteSetup, forKey: "site_setup")
        try values.encode(enableDownvotes, forKey: "enable_downvotes")
        try values.encode(enableNsfw, forKey: "enable_nsfw")
        try values.encode(isCommunityCreationAdminOnly, forKey: "community_creation_admin_only")
        try values.encode(requireEmailVerification, forKey: "require_email_verification")
        try values.encodeIfPresent(applicationQuestion, forKey: "application_question")
        try values.encode(isPrivateInstance, forKey: "private_instance")
        try values.encode(defaultTheme, forKey: "default_theme")
        try values.encode(defaultPostListingType, forKey: "default_post_listing_type")
        try values.encodeIfPresent(legalInformation, forKey: "legal_information")
        try values.encode(isHideModlogModNames, forKey: "hide_modlog_mod_names")
        try values.encode(isApplicationEmailAdmins, forKey: "application_email_admins")
        try values.encodeIfPresent(slurFilterRegex, forKey: "slur_filter_regex")
        try values.encode(actorNameMaxLength, forKey: "actor_name_max_length")
        try values.encode(isFederationEnabled, forKey: "federation_enabled")
        try values.encode(isCaptchaEnabled, forKey: "captcha_enabled")
        try values.encode(captchaDifficulty, forKey: "captcha_difficulty")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
        try values.encode(registrationMode, forKey: "registration_mode")
        try values.encode(isReportsEmailAdmins, forKey: "reports_email_admins")
    }
}
