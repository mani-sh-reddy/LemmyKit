// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Post: Codable {
    /// PostId
    public var id: Double
    /// Post.name
    public var name: String
    /// Post.url
    public var url: String?
    /// Post.body
    public var body: String?
    /// PersonId
    public var creatorID: Double
    public var communityID: Double
    /// Post.removed
    public var isRemoved: Bool
    /// Post.locked
    public var isLocked: Bool
    /// Post.published
    public var published: String
    /// Post.updated
    public var updated: String?
    /// Post.deleted
    public var isDeleted: Bool
    /// Post.nsfw
    public var isNsfw: Bool
    /// Post.embed_title
    public var embedTitle: String?
    /// Post.embed_description
    public var embedDescription: String?
    /// Post.thumbnail_url
    public var thumbnailURL: String?
    /// Post.ap_id
    public var apid: String
    /// Post.local
    public var isLocal: Bool
    /// Post.embed_video_url
    public var embedVideoURL: String?
    public var languageID: Double
    /// Post.featured_community
    public var isFeaturedCommunity: Bool
    /// Post.featured_local
    public var isFeaturedLocal: Bool

    public init(id: Double, name: String, url: String? = nil, body: String? = nil, creatorID: Double, communityID: Double, isRemoved: Bool, isLocked: Bool, published: String, updated: String? = nil, isDeleted: Bool, isNsfw: Bool, embedTitle: String? = nil, embedDescription: String? = nil, thumbnailURL: String? = nil, apid: String, isLocal: Bool, embedVideoURL: String? = nil, languageID: Double, isFeaturedCommunity: Bool, isFeaturedLocal: Bool) {
        self.id = id
        self.name = name
        self.url = url
        self.body = body
        self.creatorID = creatorID
        self.communityID = communityID
        self.isRemoved = isRemoved
        self.isLocked = isLocked
        self.published = published
        self.updated = updated
        self.isDeleted = isDeleted
        self.isNsfw = isNsfw
        self.embedTitle = embedTitle
        self.embedDescription = embedDescription
        self.thumbnailURL = thumbnailURL
        self.apid = apid
        self.isLocal = isLocal
        self.embedVideoURL = embedVideoURL
        self.languageID = languageID
        self.isFeaturedCommunity = isFeaturedCommunity
        self.isFeaturedLocal = isFeaturedLocal
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.body = try values.decodeIfPresent(String.self, forKey: "body")
        self.creatorID = try values.decode(Double.self, forKey: "creator_id")
        self.communityID = try values.decode(Double.self, forKey: "community_id")
        self.isRemoved = try values.decode(Bool.self, forKey: "removed")
        self.isLocked = try values.decode(Bool.self, forKey: "locked")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
        self.isDeleted = try values.decode(Bool.self, forKey: "deleted")
        self.isNsfw = try values.decode(Bool.self, forKey: "nsfw")
        self.embedTitle = try values.decodeIfPresent(String.self, forKey: "embed_title")
        self.embedDescription = try values.decodeIfPresent(String.self, forKey: "embed_description")
        self.thumbnailURL = try values.decodeIfPresent(String.self, forKey: "thumbnail_url")
        self.apid = try values.decode(String.self, forKey: "ap_id")
        self.isLocal = try values.decode(Bool.self, forKey: "local")
        self.embedVideoURL = try values.decodeIfPresent(String.self, forKey: "embed_video_url")
        self.languageID = try values.decode(Double.self, forKey: "language_id")
        self.isFeaturedCommunity = try values.decode(Bool.self, forKey: "featured_community")
        self.isFeaturedLocal = try values.decode(Bool.self, forKey: "featured_local")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encode(creatorID, forKey: "creator_id")
        try values.encode(communityID, forKey: "community_id")
        try values.encode(isRemoved, forKey: "removed")
        try values.encode(isLocked, forKey: "locked")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
        try values.encode(isDeleted, forKey: "deleted")
        try values.encode(isNsfw, forKey: "nsfw")
        try values.encodeIfPresent(embedTitle, forKey: "embed_title")
        try values.encodeIfPresent(embedDescription, forKey: "embed_description")
        try values.encodeIfPresent(thumbnailURL, forKey: "thumbnail_url")
        try values.encode(apid, forKey: "ap_id")
        try values.encode(isLocal, forKey: "local")
        try values.encodeIfPresent(embedVideoURL, forKey: "embed_video_url")
        try values.encode(languageID, forKey: "language_id")
        try values.encode(isFeaturedCommunity, forKey: "featured_community")
        try values.encode(isFeaturedLocal, forKey: "featured_local")
    }
}
