// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CommentReport: Codable {
    /// CommentReportId
    public var id: Double
    /// PersonId
    public var creatorID: Double
    public var commentID: Double
    /// CommentReport.original_comment_text
    public var originalCommentText: String
    /// CommentReport.reason
    public var reason: String
    /// CommentReport.resolved
    public var isResolved: Bool
    /// PersonId
    public var resolverID: Double?
    /// CommentReport.published
    public var published: String
    /// CommentReport.updated
    public var updated: String?

    public init(id: Double, creatorID: Double, commentID: Double, originalCommentText: String, reason: String, isResolved: Bool, resolverID: Double? = nil, published: String, updated: String? = nil) {
        self.id = id
        self.creatorID = creatorID
        self.commentID = commentID
        self.originalCommentText = originalCommentText
        self.reason = reason
        self.isResolved = isResolved
        self.resolverID = resolverID
        self.published = published
        self.updated = updated
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.creatorID = try values.decode(Double.self, forKey: "creator_id")
        self.commentID = try values.decode(Double.self, forKey: "comment_id")
        self.originalCommentText = try values.decode(String.self, forKey: "original_comment_text")
        self.reason = try values.decode(String.self, forKey: "reason")
        self.isResolved = try values.decode(Bool.self, forKey: "resolved")
        self.resolverID = try values.decodeIfPresent(Double.self, forKey: "resolver_id")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(creatorID, forKey: "creator_id")
        try values.encode(commentID, forKey: "comment_id")
        try values.encode(originalCommentText, forKey: "original_comment_text")
        try values.encode(reason, forKey: "reason")
        try values.encode(isResolved, forKey: "resolved")
        try values.encodeIfPresent(resolverID, forKey: "resolver_id")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
    }
}
