// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CommentView: Codable {
    public var comment: Comment
    /// Person
    public var creator: Person
    public var post: Post
    public var community: Community
    /// CommentAggregates
    public var counts: CommentAggregates
    /// CommentView.creator_banned_from_community
    public var isCreatorBannedFromCommunity: Bool
    /// SubscribedType
    public var subscribed: SubscribedType
    /// CommentView.saved
    public var isSaved: Bool
    /// CommentView.creator_blocked
    public var isCreatorBlocked: Bool
    /// CommentView.my_vote
    public var myVote: Double?

    public init(comment: Comment, creator: Person, post: Post, community: Community, counts: CommentAggregates, isCreatorBannedFromCommunity: Bool, subscribed: SubscribedType, isSaved: Bool, isCreatorBlocked: Bool, myVote: Double? = nil) {
        self.comment = comment
        self.creator = creator
        self.post = post
        self.community = community
        self.counts = counts
        self.isCreatorBannedFromCommunity = isCreatorBannedFromCommunity
        self.subscribed = subscribed
        self.isSaved = isSaved
        self.isCreatorBlocked = isCreatorBlocked
        self.myVote = myVote
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.comment = try values.decode(Comment.self, forKey: "comment")
        self.creator = try values.decode(Person.self, forKey: "creator")
        self.post = try values.decode(Post.self, forKey: "post")
        self.community = try values.decode(Community.self, forKey: "community")
        self.counts = try values.decode(CommentAggregates.self, forKey: "counts")
        self.isCreatorBannedFromCommunity = try values.decode(Bool.self, forKey: "creator_banned_from_community")
        self.subscribed = try values.decode(SubscribedType.self, forKey: "subscribed")
        self.isSaved = try values.decode(Bool.self, forKey: "saved")
        self.isCreatorBlocked = try values.decode(Bool.self, forKey: "creator_blocked")
        self.myVote = try values.decodeIfPresent(Double.self, forKey: "my_vote")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(comment, forKey: "comment")
        try values.encode(creator, forKey: "creator")
        try values.encode(post, forKey: "post")
        try values.encode(community, forKey: "community")
        try values.encode(counts, forKey: "counts")
        try values.encode(isCreatorBannedFromCommunity, forKey: "creator_banned_from_community")
        try values.encode(subscribed, forKey: "subscribed")
        try values.encode(isSaved, forKey: "saved")
        try values.encode(isCreatorBlocked, forKey: "creator_blocked")
        try values.encodeIfPresent(myVote, forKey: "my_vote")
    }
}
