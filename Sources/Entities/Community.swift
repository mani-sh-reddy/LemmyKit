// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Community: Codable {
    /// CommunityId
    public var id: Double?
    /// Community.name
    public var name: String
    /// Community.title
    public var title: String
    /// Community.description
    public var description: String?
    /// Community.removed
    public var isRemoved: Bool
    /// Community.published
    public var published: String
    /// Community.updated
    public var updated: String?
    /// Community.deleted
    public var isDeleted: Bool
    /// Community.nsfw
    public var isNsfw: Bool
    /// Community.actor_id
    public var actorID: String
    /// Community.local
    public var isLocal: Bool
    /// Community.icon
    public var icon: String?
    /// Community.banner
    public var banner: String?
    /// Community.followers_url
    public var followersURL: String?
    /// Community.inbox_url
    public var inboxURL: String?
    /// Community.hidden
    public var isHidden: Bool
    /// Community.posting_restricted_to_mods
    public var isPostingRestrictedToMods: Bool
    public var instanceID: Double

    public init(id: Double, name: String, title: String, description: String? = nil, isRemoved: Bool, published: String, updated: String? = nil, isDeleted: Bool, isNsfw: Bool, actorID: String, isLocal: Bool, icon: String? = nil, banner: String? = nil, followersURL: String, inboxURL: String, isHidden: Bool, isPostingRestrictedToMods: Bool, instanceID: Double) {
        self.id = id
        self.name = name
        self.title = title
        self.description = description
        self.isRemoved = isRemoved
        self.published = published
        self.updated = updated
        self.isDeleted = isDeleted
        self.isNsfw = isNsfw
        self.actorID = actorID
        self.isLocal = isLocal
        self.icon = icon
        self.banner = banner
        self.followersURL = followersURL
        self.inboxURL = inboxURL
        self.isHidden = isHidden
        self.isPostingRestrictedToMods = isPostingRestrictedToMods
        self.instanceID = instanceID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Double.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.title = try values.decode(String.self, forKey: "title")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.isRemoved = try values.decode(Bool.self, forKey: "removed")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
        self.isDeleted = try values.decode(Bool.self, forKey: "deleted")
        self.isNsfw = try values.decode(Bool.self, forKey: "nsfw")
        self.actorID = try values.decode(String.self, forKey: "actor_id")
        self.isLocal = try values.decode(Bool.self, forKey: "local")
        self.icon = try values.decodeIfPresent(String.self, forKey: "icon")
        self.banner = try values.decodeIfPresent(String.self, forKey: "banner")
        self.followersURL = try values.decodeIfPresent(String.self, forKey: "followers_url")
        self.inboxURL = try values.decodeIfPresent(String.self, forKey: "inbox_url")
        self.isHidden = try values.decode(Bool.self, forKey: "hidden")
        self.isPostingRestrictedToMods = try values.decode(Bool.self, forKey: "posting_restricted_to_mods")
        self.instanceID = try values.decode(Double.self, forKey: "instance_id")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encode(title, forKey: "title")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(isRemoved, forKey: "removed")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
        try values.encode(isDeleted, forKey: "deleted")
        try values.encode(isNsfw, forKey: "nsfw")
        try values.encode(actorID, forKey: "actor_id")
        try values.encode(isLocal, forKey: "local")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(banner, forKey: "banner")
        try values.encode(followersURL, forKey: "followers_url")
        try values.encode(inboxURL, forKey: "inbox_url")
        try values.encode(isHidden, forKey: "hidden")
        try values.encode(isPostingRestrictedToMods, forKey: "posting_restricted_to_mods")
        try values.encode(instanceID, forKey: "instance_id")
    }
}
