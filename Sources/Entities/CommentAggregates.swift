// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CommentAggregates: Codable {
    /// CommentAggregates.id
    public var id: Double
    public var commentID: Double
    /// CommentAggregates.score
    public var score: Double
    /// CommentAggregates.upvotes
    public var upvotes: Double
    /// CommentAggregates.downvotes
    public var downvotes: Double
    /// CommentAggregates.published
    public var published: String
    /// CommentAggregates.child_count
    public var childCount: Double
    /// CommentAggregates.hot_rank
    public var hotRank: Double

    public init(id: Double, commentID: Double, score: Double, upvotes: Double, downvotes: Double, published: String, childCount: Double, hotRank: Double) {
        self.id = id
        self.commentID = commentID
        self.score = score
        self.upvotes = upvotes
        self.downvotes = downvotes
        self.published = published
        self.childCount = childCount
        self.hotRank = hotRank
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.commentID = try values.decode(Double.self, forKey: "comment_id")
        self.score = try values.decode(Double.self, forKey: "score")
        self.upvotes = try values.decode(Double.self, forKey: "upvotes")
        self.downvotes = try values.decode(Double.self, forKey: "downvotes")
        self.published = try values.decode(String.self, forKey: "published")
        self.childCount = try values.decode(Double.self, forKey: "child_count")
        self.hotRank = try values.decode(Double.self, forKey: "hot_rank")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(commentID, forKey: "comment_id")
        try values.encode(score, forKey: "score")
        try values.encode(upvotes, forKey: "upvotes")
        try values.encode(downvotes, forKey: "downvotes")
        try values.encode(published, forKey: "published")
        try values.encode(childCount, forKey: "child_count")
        try values.encode(hotRank, forKey: "hot_rank")
    }
}
