// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PrivateMessage: Codable {
    /// PrivateMessageId
    public var id: Double
    /// PersonId
    public var creatorID: Double
    /// PersonId
    public var recipientID: Double
    /// PrivateMessage.content
    public var content: String
    /// PrivateMessage.deleted
    public var isDeleted: Bool
    /// PrivateMessage.read
    public var isRead: Bool
    /// PrivateMessage.published
    public var published: String
    /// PrivateMessage.updated
    public var updated: String?
    /// PrivateMessage.ap_id
    public var apid: String
    /// PrivateMessage.local
    public var isLocal: Bool

    public init(id: Double, creatorID: Double, recipientID: Double, content: String, isDeleted: Bool, isRead: Bool, published: String, updated: String? = nil, apid: String, isLocal: Bool) {
        self.id = id
        self.creatorID = creatorID
        self.recipientID = recipientID
        self.content = content
        self.isDeleted = isDeleted
        self.isRead = isRead
        self.published = published
        self.updated = updated
        self.apid = apid
        self.isLocal = isLocal
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Double.self, forKey: "id")
        self.creatorID = try values.decode(Double.self, forKey: "creator_id")
        self.recipientID = try values.decode(Double.self, forKey: "recipient_id")
        self.content = try values.decode(String.self, forKey: "content")
        self.isDeleted = try values.decode(Bool.self, forKey: "deleted")
        self.isRead = try values.decode(Bool.self, forKey: "read")
        self.published = try values.decode(String.self, forKey: "published")
        self.updated = try values.decodeIfPresent(String.self, forKey: "updated")
        self.apid = try values.decode(String.self, forKey: "ap_id")
        self.isLocal = try values.decode(Bool.self, forKey: "local")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(creatorID, forKey: "creator_id")
        try values.encode(recipientID, forKey: "recipient_id")
        try values.encode(content, forKey: "content")
        try values.encode(isDeleted, forKey: "deleted")
        try values.encode(isRead, forKey: "read")
        try values.encode(published, forKey: "published")
        try values.encodeIfPresent(updated, forKey: "updated")
        try values.encode(apid, forKey: "ap_id")
        try values.encode(isLocal, forKey: "local")
    }
}
