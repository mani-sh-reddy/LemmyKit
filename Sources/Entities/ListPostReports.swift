// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ListPostReports: Codable {
    /// ListPostReports.page
    public var page: Double?
    /// ListPostReports.limit
    public var limit: Double?
    /// ListPostReports.unresolved_only
    public var isUnresolvedOnly: Bool?
    public var communityID: Double?
    /// ListPostReports.auth
    public var auth: String

    public init(page: Double? = nil, limit: Double? = nil, isUnresolvedOnly: Bool? = nil, communityID: Double? = nil, auth: String) {
        self.page = page
        self.limit = limit
        self.isUnresolvedOnly = isUnresolvedOnly
        self.communityID = communityID
        self.auth = auth
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.page = try values.decodeIfPresent(Double.self, forKey: "page")
        self.limit = try values.decodeIfPresent(Double.self, forKey: "limit")
        self.isUnresolvedOnly = try values.decodeIfPresent(Bool.self, forKey: "unresolved_only")
        self.communityID = try values.decodeIfPresent(Double.self, forKey: "community_id")
        self.auth = try values.decode(String.self, forKey: "auth")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(page, forKey: "page")
        try values.encodeIfPresent(limit, forKey: "limit")
        try values.encodeIfPresent(isUnresolvedOnly, forKey: "unresolved_only")
        try values.encodeIfPresent(communityID, forKey: "community_id")
        try values.encode(auth, forKey: "auth")
    }
}
